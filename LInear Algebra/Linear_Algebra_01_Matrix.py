#http://www.hahack.com/math/math-matrix/

import numpy as np


-----------------------
# 创建矩阵
a = np.matrix('5 2 3;\
               3 6 0')
               
b = np.matrix('1 3 5 9; \
               2 5 6 2; \
               8 0 2 1')
               
# 数值ndarray 与矩阵的转换
b = a.getA()       # 矩阵->数组 type(b)
c = np.asmatrix(b) # 数组->矩阵 type(c)

# 取出矩阵中的某个值
a[0,0]  # 5
------------------------

# 矩阵运算
# 加，减：矩阵的行数与列数必须完全相同，否则无定义
a = np.matrix('1 0 1;\
               1 2 1;\
               2 1 1')
b = np.matrix('1 0 1;\
               1 2 1;\
               2 1 1')
               
a + b

--------------
# 乘法：充要条件是 第一个矩阵的n_columns  = 第二个矩阵的 n_rows 
a * b

# 单位矩阵和零矩阵：类比数值1 和0。矩阵*单位阵 = 本身
I = np.matrix(np.eye(3))
z = np.matrix(np.zeros((3,2)))

--------------
# 除（求逆）：A * A^-1 = I ; A的逆的逆 = A本身；可类比倒数，倒数与其他数相乘，就相当于除
    # 矩阵求逆有很多中方法，如伴随阵法、初等变化法（高斯·约当消去法）、分块矩阵求逆法
        # 初等变换法：(AI)->(IA^-1); (AI)成为A的增广矩阵
        #【矩阵的初等行变换】和 【初等列变换】 统称为【矩阵的初等变换】，包括：
            # 1、对调2行；
            # 2、k!=0 数乘某行
            # 3、数乘后加到某行
        # 矩阵A经过【有限次】初等变换变成B，那么A等价于B；

    # 奇异矩阵Singular matrix
      # 矩阵并不一定都可逆。从定义上，A可逆的充要条件是 A非奇异。公式上有1/|A|，只要矩阵M的行列式|A|=0，则除零无意义。
      # 所以，若|A|=0，则A为奇异矩阵；否则为非奇异矩阵

a = np.matrix('1 0 1; 1 2 1; 2 1 1')
a.I # 求逆
a * a.I 
a.I * a
    
singular = np.matrix('0 1; 0 0')
f.I # 会报错

--------------------------
# 矩阵的转置 
a = np.matrix('2 4;1 3')
b = np.matrix('1 6;2 4')

(a * b).T  == a.T * b.T

# 应用举例
  # 求解二元方程组 
  # { 3x + 2y = 7;   
  #   -x + y  = 1 }
  a = np.matrix('3 2;-1 1')
  b = np.matrix('7;1')
  solve = a.I * b
  
  # 二元一次矩阵求解简单，那么更高维，有成百上千个未知数呢？ np的子库linalg
  np.linalg.solve(a, b)
  ------
  
  # 假设有向量a=[3;1], b=[2;1], 求如何组成c=[7;1]
   # 用x, y 分别表示2个向量的倍数（线性组合的系数），问题转换为 [3;-1]x + [2;1]y = [7;1]，与上例完全同构。